<?xml version="1.0" encoding="UTF-8"?>
<mapcache>
   <metadata>
      <title>Mapcache Server</title>
      <abstract></abstract>

      <!-- url

           uncomment and modify this if you need to provide another base url for
           getCapabilities requests (for the OnlineResource tags). You should use 
           this if there's a proxy between the client and the mod-mapcache service
           and you want the capabilities document to point to the correct endpoints.
      
      <url>http://mysuperhost/proxy/to/mapcache</url>
      -->
   </metadata>

   <!--
        a grid represents the layout of tiles: srs, extent, resolutions, and tile size
   -->

   <grid name="bdgex">
      <metadata>
         <title>BDGEx's Scale oriented GRID</title>
      <!--<WellKnownScaleSet>urn:ogc:def:wkss:OGC:1.0:GoogleMapsCompatible</WellKnownScaleSet>-->
      </metadata>
      <extent>-125, -55, 0, 15</extent>
      <srs>EPSG:4326</srs>
   <!--<srsalias>EPSG:900913</srsalias>-->
      <units>dd</units>
      <size>256 256</size>
      <resolutions>0.07936954220105226, 0.06349563376084183, 0.047621725320631365, 0.031747816880420915, 0.015873908440210457, 0.007936954220105229, 0.0031747816880420914, 0.0015873908440210457, 0.0007936954220105229, 0.00031747816880420905, 0.0002476329716672831, 0.00015873908440210453, 7.936954220105226e-05, 4.7621725320631366e-05, 3.1747816880420904e-05, 2.3810862660315683e-05, 1.5873908440210452e-05, 7.936954220105226e-06, 3.174781688042091e-06, 1.5873908440210455e-06, 3.174781688042091e-07</resolutions>
   </grid>
   

<!--
         there are three preconfigured grids you can use in <tileset>s without having to
         explicitely define them here:
-->
         <grid name="WGS84_2">
            <metadata>
               <title>GoogleCRS84Quad</title>
               <WellKnownScaleSet>urn:ogc:def:wkss:OGC:1.0:GoogleCRS84Quad</WellKnownScaleSet>
            </metadata>
            <extent>-180 -180 180 180</extent>
            <srs>EPSG:4326</srs>
            <units>dd</units>
            <size>256 256</size>
            <resolutions>1.40625000000000 0.703125000000000 0.351562500000000 0.175781250000000 8.78906250000000e-2 4.39453125000000e-2 2.19726562500000e-2 1.09863281250000e-2 5.49316406250000e-3 2.74658203125000e-3 1.37329101562500e-3 6.86645507812500e-4 3.43322753906250e-4 1.71661376953125e-4 8.58306884765625e-5 4.29153442382812e-5 2.14576721191406e-5 1.07288360595703e-5 5.36441802978516e-6</resolutions>
         </grid>
<!--
         <grid name="GoogleMapsCompatible">
            <metadata>
               <title>GoogleMapsCompatible</title>
               <WellKnownScaleSet>urn:ogc:def:wkss:OGC:1.0:GoogleMapsCompatible</WellKnownScaleSet>
            </metadata>
            <extent>-20037508.3427892480 -20037508.3427892480 20037508.3427892480 20037508.3427892480</extent>
            <srs>EPSG:3857</srs>
            <srsalias>EPSG:900913</srsalias>
            <units>m</units>
            <size>256 256</size>
            <resolutions>156543.0339280410 78271.51696402048 39135.75848201023 19567.87924100512 9783.939620502561 4891.969810251280 2445.984905125640 1222.992452562820 611.4962262814100 305.7481131407048 152.8740565703525 76.43702828517624 38.21851414258813 19.10925707129406 9.554628535647032 4.777314267823516 2.388657133911758 1.194328566955879 0.5971642834779395</resolutions>
         </grid>
-->

   <!-- this grid is identical to the previous one, except that it uses EPSG:900913 as the default srs as it is more supported -->
   <!--
        <grid name="g">
            <metadata>
               <title>GoogleMapsCompatible</title>
               <WellKnownScaleSet>urn:ogc:def:wkss:OGC:1.0:GoogleMapsCompatible</WellKnownScaleSet>
            </metadata>
            <extent>-20037508.3427892480,-20037508.3427892480,20037508.3427892480,20037508.3427892480</extent>
            <srs>EPSG:900913</srs>
            <srsalias>EPSG:3857</srsalias>
            <size>256 256</size>
            <resolutions>
               156543.0339280410
               78271.51696402048
               39135.75848201023
               19567.87924100512
               9783.939620502561
               4891.969810251280
               2445.984905125640
               1222.992452562820
               611.4962262814100
               305.7481131407048
               152.8740565703525
               76.43702828517624
               38.21851414258813
               19.10925707129406
               9.554628535647032
               4.777314267823516
               2.388657133911758
               1.194328566955879
               0.5971642834779395
            </resolutions>
         </grid>
   --> 

   <!--
        a cache is where tiles are stored once they have been rendered
   -->
   <cache name="disk" type="disk">

      <!-- base
           
           absolute filesystem path where the tile structure will be stored.
           this directory needs to be readable and writable by the user running
           apache
      -->
      <base>/var/sig/tiles</base>

      <!-- symlink_blank
           
           enable blank (i.e. uniform color) tile detection. blank tiles will be
           detected at creation time and linked to a single blank tile on disk to
           preserve disk space.
      -->
      <symlink_blank/>
   </cache>


   <!-- format

        a format is an image algorithm used for compressing images
        types can be "PNGQ_FAST" or "JPEG"
   -->
   <format name="PNGQ_FAST" type ="PNG">
      
      <!-- compression

           png compression: best or fast
           note that "best" compression is cpu intensive for little gain over the default
           default compression is obtained by leving out this tag.
      -->
      <compression>fast</compression>

      <!-- colors

         if supplied, this enables png quantization which reduces the number of colors
         in an image to atain higher compression. this operation is destructive, and can
         cause artifacts in the stored image.
         the number of colors can be between 2 and 256
     -->
     <colors>256</colors>
   </format>
   <format name="myjpeg" type ="JPEG">
      <!-- quality

           JPEG compression quality, ranging from 0 to 100
           95 produces high quality images with few visual artifacts
           values under around 80 produce small images but with visible artifacts.
           YMMV
      -->
      <quality>75</quality>  

      <photometric>RGB</photometric>   <!-- RGB | YCBCR -->
   </format>
    <format name="PNG_BEST" type ="PNG">
      
      <!-- compression

           png compression: best or fast
           note that "best" compression is cpu intensive for little gain over the default
           default compression is obtained by leving out this tag.
      -->
      <compression>best</compression>

      <!-- colors

         if supplied, this enables png quantization which reduces the number of colors
         in an image to atain higher compression. this operation is destructive, and can
         cause artifacts in the stored image.
         the number of colors can be between 2 and 256
     -->
   </format>
   <format name="MVT" type="RAW"> 
     <extension>mvt</extension>
     <mime_type>application/vnd.mapbox-vector-tile</mime_type>
   </format>

   <!--
   <source name="bluemarble" type="gdal">
      <data>/gro2/data/bluemarble/bluemarble.vrt</data>
   </source>
   -->
   <!-- source

      the service to query for obtaining images if they are not in the cache
      for now, type can only be "wms"
   -->

   
   <source name="test" type="wms">
      <getmap>
         <params>
            <FORMAT>image/png</FORMAT>
            <LAYERS>cities</LAYERS>
         </params>
      </getmap>
      <http>
         <url>http://mapserver?map=/etc/mapserver/teste.map</url>
         <connection_timeout>30</connection_timeout>
         <timeout>3000</timeout>
      </http>
   </source>
         
   <tileset name="test">
      <source>test</source>
      <cache>disk</cache>
	  <grid>bdgex</grid> <!--restricted_extent="-10 40 10 50" minzoom="6" maxzoom="8" -->
      <metadata>
         <title>test</title>
         <abstract>Just a sample test</abstract>
      </metadata>
      <format>PNG_BEST</format>
      <metatile>1 1</metatile>
      <metabuffer>1</metabuffer>
   </tileset>
   
   <source name="hid" type="wms">
      <getmap>
         <params>
            <FORMAT>image/png</FORMAT>
            <LAYERS>hid_banco_areia_a</LAYERS>
         </params>
      </getmap>
      <http>
         <url>http://mapserver?map=/etc/mapserver/teste.map</url>
         <connection_timeout>30</connection_timeout>
         <timeout>3000</timeout>
      </http>
   </source>
         
   <tileset name="hid">
      <source>hid</source>
      <cache>disk</cache>
	  <grid>bdgex</grid>
      <metadata>
         <title>hid</title>
         <abstract>Just a sample test</abstract>
      </metadata>
      <format>PNG_BEST</format>
      <metatile>1 1</metatile>
      <metabuffer>1</metabuffer>
   </tileset>
   
   <source name="hid_vector" type="wms">
     <http>
       <url>http://mapserver?map=/etc/mapserver/teste.map</url>
     </http>
     <getmap>
       <params>
         <LAYERS>hid_banco_areia_a</LAYERS>
         <FORMAT>application/vnd.mapbox-vector-tile</FORMAT>
       </params>
     </getmap>
   </source>

   <tileset name="hid_vector">
     <source>hid_vector</source>
     <grid>bdgex</grid>
     <cache>disk</cache>
     <format>MVT</format>
   </tileset>
   
   <source name="hid_trecho_drenagem_l" type="wms">
      <getmap>
         <params>
            <FORMAT>image/png</FORMAT>
            <LAYERS>hid_trecho_drenagem_l</LAYERS>
         </params>
      </getmap>
      <http>
         <url>http://mapserver?map=/etc/mapserver/teste.map</url>
         <connection_timeout>30</connection_timeout>
         <timeout>3000</timeout>
      </http>
   </source>
         
   <tileset name="hid_trecho_drenagem_l">
      <source>hid_trecho_drenagem_l</source>
      <cache>disk</cache>
	  <grid>bdgex</grid>
      <metadata>
         <title>hid_trecho_drenagem_l</title>
         <abstract>Just a sample test</abstract>
      </metadata>
      <format>PNG_BEST</format>
      <metatile>1 1</metatile>
      <metabuffer>1</metabuffer>
   </tileset>
   
   <source name="hid_trecho_drenagem_l_vector" type="wms">
     <http>
       <url>http://mapserver?map=/etc/mapserver/teste.map</url>
     </http>
     <getmap>
       <params>
         <LAYERS>hid_trecho_drenagem_l</LAYERS>
         <FORMAT>application/vnd.mapbox-vector-tile</FORMAT>
       </params>
     </getmap>
   </source>

   <tileset name="hid_trecho_drenagem_l_g">
     <source>hid_trecho_drenagem_l_vector</source>
     <grid>g</grid>
     <cache>disk</cache>
     <format>MVT</format>
   </tileset>

   <tileset name="hid_trecho_drenagem_l_wgs84">
     <source>hid_trecho_drenagem_l_vector</source>
     <grid>WGS84</grid>
     <cache>disk</cache>
     <format>MVT</format>
   </tileset>

   <tileset name="hid_trecho_drenagem_l_bdgex">
     <source>hid_trecho_drenagem_l_vector</source>
     <grid>bdgex</grid>
     <cache>disk</cache>
     <format>MVT</format>
   </tileset>
   
   <source name="trecho_drenagem_l_source" type="wms">
     <http>
       <url>http://mapserver?map=/etc/mapserver/teste.map</url>
     </http>
     <getmap>
       <params>
         <LAYERS>trecho_drenagem_l</LAYERS>
         <FORMAT>application/vnd.mapbox-vector-tile</FORMAT>
       </params>
     </getmap>
   </source>

   <tileset name="trecho_drenagem_l_g">
     <source>trecho_drenagem_l_source</source>
     <grid>g</grid>
     <cache>disk</cache>
     <format>MVT</format>
   </tileset>
   
   <source name="massa_dagua_a_source" type="wms">
     <http>
       <url>http://mapserver?map=/etc/mapserver/teste.map</url>
     </http>
     <getmap>
       <params>
         <LAYERS>massa_dagua_a</LAYERS>
         <FORMAT>application/vnd.mapbox-vector-tile</FORMAT>
       </params>
     </getmap>
   </source>

   <tileset name="massa_dagua_a_g">
     <source>massa_dagua_a_source</source>
     <grid>g</grid>
     <cache>disk</cache>
     <format>MVT</format>
   </tileset>
   
   <source name="trecho_massa_dagua_a_source" type="wms">
     <http>
       <url>http://mapserver?map=/etc/mapserver/teste.map</url>
     </http>
     <getmap>
       <params>
         <LAYERS>trecho_massa_dagua_a</LAYERS>
         <FORMAT>application/vnd.mapbox-vector-tile</FORMAT>
       </params>
     </getmap>
   </source>

   <tileset name="trecho_massa_dagua_a_g">
     <source>trecho_massa_dagua_a_source</source>
     <grid>g</grid>
     <cache>disk</cache>
     <format>MVT</format>
   </tileset>
   
   <source name="trecho_drenagem_l_sourcewms" type="wms">
      <getmap>
         <params>
            <FORMAT>image/png</FORMAT>
            <LAYERS>trecho_drenagem_l</LAYERS>
         </params>
      </getmap>
      <http>
         <url>http://mapserver?map=/etc/mapserver/teste.map</url>
         <connection_timeout>30</connection_timeout>
         <timeout>3000</timeout>
      </http>
   </source>
         
   <tileset name="trecho_drenagem_l">
      <source>trecho_drenagem_l_sourcewms</source>
      <cache>disk</cache>
	  <grid>bdgex</grid>
      <metadata>
         <title>trecho_drenagem_l_multiescala</title>
         <abstract>Teste Multiescala</abstract>
      </metadata>
      <format>PNG_BEST</format>
      <metatile>1 1</metatile>
      <metabuffer>1</metabuffer>
   </tileset>

   <!-- default_format
      format to use when a client asks for an image that is dynamically created from multiple
      tiles from the cache.
      note that using a png format with "best" compression is not recommended
      here as it comes with a very compression overhead in terms of cpu processing. it is
      recommended to use a png format with "fast"compression here, unless you have plenty
      of server cpu power and or limited bandwidth
   -->
   <default_format>PNGQ_FAST</default_format>

   <!-- services
      services that will be responded to by mod-mapcache
      each service is accessible at the url http://host/path/to/mapcache/{service},
      eg http://myhost/mapcache/wms for OGC WMS.
   -->
   <service type="wms" enabled="true">
      <!-- this service should actually be called "ogc". It is different from the other
           services as it does not listen on the /wms endpoint, but directly on /.
           It will intercept wms getmap requests that can be treated from configured
           tilesets, and can optionally forward all the rest to (an)other server(s)
           TODO: this needs way more documenting
      <forwarding_rule name="foo rule">
            <append_pathinfo>true</append_pathinfo>
            <http>
               <url>http://localhost/mapcacheproxy</url>
            </http>
      </forwarding_rule>
      -->
      <!-- full_wms
           configure response to wms requests that are not aligned to a tileset's grids.
           responding to requests that are not in the SRS of a configured grid is not supported, but
           this should never happen as only the supported SRSs are publicized in the capabilities
           document.

           allowed values are:
             - error: return a 404 error (default)
             - assemble: build the full image by assembling the tiles from the cache
             - forward: forward the request to the configured source.
      -->
      <full_wms>assemble</full_wms>
      <!-- resample mode
      filter applied when resampling tiles for full wms requests.
      can be either:
      - nearest : fastest, poor quality
      - bilinear: slower, higher qulity
      -->
      <resample_mode>nearest</resample_mode>
      
      <!-- format
         image format to use when assembling tiles
      -->
      <format>PNGQ_FAST</format>
      <maxsize>4096</maxsize>

   </service>
   <service type="wmts" enabled="true"/>
   <service type="tms" enabled="true"/>
   <service type="kml" enabled="true"/>
   <service type="gmaps" enabled="true"/>
   <service type="ve" enabled="true"/>
   <service type="demo" enabled="true"/>
   <service type="mapguide" enabled="true"/>

   <!-- errors
        configure how error will be reported back to a client:
          - log : no error is reported back, except an http error code.
          - report : return the error message to the client in textual format
          - empty_img : return an empty image to the client. the actual error code is in the X-Mapcache-Error http header
          - report_img : return an image with the error text included inside. not implemented yet.

        the default setting is to report the error message back to the user. In production, you might want to set this to "log"
        if you're paranoid, or to "empty_img" if you want to play nice with non-conforming clients.
   -->
   <errors>report</errors>

   
   <!--
        location to put lockfiles (to block other clients while a metatile is being rendered.
        defaults to /tmp
        this location should be writable by the apache user
   -->
   <lock_dir>/var/sig/tiles</lock_dir>

   <!-- use multiple threads when fetching multiple tiles (used for wms tile assembling -->
   <threaded_fetching>true</threaded_fetching>
   
   
   <!-- fastcgi only -->
   <log_level>info</log_level> <!-- logging verbosity -->
   <auto_reload>true</auto_reload> <!-- auto reload if config file changed -->

</mapcache>
